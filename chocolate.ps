%!PS

% GhostScript invocation:
%
% gs -sDEVICE=pngalpha -sOutputFile=chocolate_%02d.png -r72 -dNOPAUSE
%    -dBATCH -sPAPERSIZE=letter chocolate.ps

% Define the width and height of the page in points.
%
/pagewidth 85 72 mul 10 div def     % 8.5 inches
/pageheight 11 72 mul def           % 11 inches

% Define the width/height of chocolate cells in points
%
/celldim 54 def   % 3/4 inch

% Store the colors of the left, top, right, and bottom parts of the
% chocolate, each as an array of normalized R G B float values
%
/areacolors [
  [0.0 1.0 0.0]       % Green for left
  [1.0 0.5 0.0]       % Orange for top  
  [0.5 0.0 1.0]       % Magenta for right
  [0.25 0.75 1.0]     % Sea blue for bottom
] def

% Store the ink darkening value, which is multiplied to the chocolate
% color RGB channels to get the color of the outer border of each cell
%
/inkscale 0.5 def

% Store the width of each border within each cell in 1/72 inch units --
% the array stores the widths in order left top right bottom
%
/borderwidths [2 2 5 5] def

% Set the current chocolate color parameter to a default value of 50%
% gray
%
/chcolor [0.5 0.5 0.5] def

% Figure out total dimensions of 5x8 chocolate
%
/barwidth 5 celldim mul def
/barheight 8 celldim mul def

% Figure out horizontal and vertical displacement to center chocolate
%
/hframe pagewidth barwidth sub 2 div def
/vframe pageheight barheight sub 2 div def

% Function which draws a single cell of the chocolate bar; the X and Y
% coordinates of the lower-left corner of the cell are given on the
% stack:
%
%   [x] [y] drawcell -
%
/drawcell {

  % Save graphics state
  gsave

  % We will draw two rectangles, so first duplicate the parameters, so
  % that stack has [x] [y] [x] [y]
  2 copy

  % Get a path around the full area of the cell
  newpath
  
  moveto
  celldim 0 rlineto
  0 celldim rlineto
  celldim neg 0 rlineto
  closepath
  
  % Fill in the full cell with the current chocolate color, but all
  % channels multiplied by the ink scale
  chcolor 0 get inkscale mul
  chcolor 1 get inkscale mul
  chcolor 2 get inkscale mul
    setrgbcolor
    fill
  
  % Use the bottom and left border widths to go to the lower-left corner
  % of the inner rectangle
  newpath
  
  exch
    borderwidths 0 get add  % Add left border to X
  exch
  borderwidths 3 get add    % Add right border to Y
  
  moveto
  
  % Compute the width and height of the inner rectangle
  celldim                   % Start with cell width
    borderwidths 0 get sub  % Subtract left border
    borderwidths 2 get sub  % Subtract right border
  
  celldim                   % Start with cell height
    borderwidths 1 get sub  % Subtract top border
    borderwidths 3 get sub  % Subtract bottom border
  
  % Draw the inner rectangle
  dup 0 exch rlineto
  exch dup 0 rlineto exch
  dup neg 0 exch rlineto
  closepath
  
  % Pop the inner dimensions from stack
  pop
  pop
  
  % Fill in the inner rectangle with the current chocolate color
  chcolor 0 get
  chcolor 1 get
  chcolor 2 get
    setrgbcolor
    fill

  % Restore graphics state
  grestore
} bind def

% Function which draws and fills the complete chocolate bar
%
/drawbar {
  
  % Local dictionary
  5 dict begin
  
  % Draw each column of the chocolate bar
  0 1 4 {
    
    % Define the X coordinate of the current column
    /currentx exch def
    
    % Draw each cell this column
    0 1 7 {
    
      % Define the Y coordinate of the current row
      /currenty exch def
      
      % Compute the X,Y coordinates of the bottom-left corner of this
      % chocolate bar cell
      hframe currentx celldim mul add
      vframe currenty celldim mul add
      
      % Draw this cell
      drawcell
    
    } for
  } for
  
  % End local dictionary
  end
  
} bind def

% Function which draws and fills only the bottom piece of the chocolate
% bar
%
/drawbottom {

  % Save clipping path
  clipsave
  
  % Define the clipping path by first moving to left side of the page,
  % vertical level of the top of the second row from bottom
  newpath
  0 vframe celldim 2 mul add moveto
  
  % Go to the start of the division
  hframe 0 rlineto
  
  % This is the division line
  barwidth celldim 2 mul rlineto
  
  % Go a full bar width to the right
  barwidth 0 rlineto
  
  % Now go to bottom of page
  0 celldim 4 mul vframe add neg rlineto
  
  % Back to bottom-left corner of page
  0 0 lineto
  
  % Close path and establish clipping area
  closepath
  clip
  newpath
  
  % Set the color
  /chcolor areacolors 3 get def
  
  % Draw the full chocolate bar with everything but the bottom piece
  % clipped out
  drawbar
  
  % Restore clipping path
  cliprestore

} bind def

% Function which draws and fills all pieces except the bottom piece of
% the chocolate bar -- in other words, everything above the diagonal
% division line; this does NOT set the current chocolate color
%
/drawtophalf {

  % Save clip state
  clipsave

  % Define the clipping path by first moving to left side of the page,
  % vertical level of the top of the second row from bottom
  newpath
  0 vframe celldim 2 mul add moveto
  
  % Go to the start of the division
  hframe 0 rlineto
  
  % This is the division line
  barwidth celldim 2 mul rlineto
  
  % Go a full bar width to the right
  barwidth 0 rlineto
  
  % Go a full bar height up
  0 barheight rlineto
  
  % Now go to top left corner of page
  0 pageheight lineto
  
  % Close path and establish clipping area
  closepath
  clip
  newpath
  
  % Draw the full chocolate bar with the bottom piece clipped out
  drawbar

  % Restore clip state
  cliprestore

} bind def

% Function which draws and fills only the right piece of the chocolate
% bar
%
/drawright {

  % Save clipping state
  clipsave
  
  % Define clipping area as right half of page such that only the last
  % two columns of the chocolate bar are included
  newpath
  
  hframe celldim 3 mul add 0 moveto
  
  0 pageheight rlineto
  pagewidth pageheight lineto
  pagewidth 0 lineto
  closepath
  
  clip
  newpath
  
  % Set the chocolate color
  /chcolor areacolors 2 get def
  
  % Draw just the top half of the chocolate bar with this clipping
  % enabled
  drawtophalf
  
  % Restore clipping state
  grestore

} bind def

% Function which draws and fills only the top-left side part of the
% chocolate bar; this does NOT set the current chocolate color
%
/drawsidepart {
  
  % Save clipping state
  clipsave
  
  % Define clipping area as left half of page such that all but the last
  % two columns of the chocolate bar are included
  newpath
  
  0 0 moveto
  
  hframe celldim 3 mul add 0 lineto
  0 pageheight rlineto
  0 pageheight lineto
  closepath
  
  clip
  newpath
  
  % Draw just the top half of the chocolate bar with this clipping
  % enabled
  drawtophalf
  
  % Restore clipping state
  cliprestore
  
} bind def

% Function which draws and fills only the middle-left piece of the
% chocolate bar
%
/drawleft {

  % Save clipping state
  clipsave
  
  % Define clipping area as bottom half of page such that all but the
  % top row of the chocolate bar is included
  newpath
  
  0 0 moveto
  
  0 vframe celldim 7 mul add lineto
  pagewidth 0 rlineto
  pagewidth 0 lineto
  closepath
  
  clip
  newpath
  
  % Set the chocolate color
  /chcolor areacolors 0 get def
  
  % Draw just the side part of the chocolate bar with this clipping
  % enabled
  drawsidepart
  
  % Restore clipping state
  cliprestore

} bind def

% Function which draws and fills only the top-left piece of the
% chocolate bar
%
/drawtop {

  % Save clipping state
  clipsave
  
  % Define clipping area as top half of page such that only the top row
  % of the chocolate bar is included
  newpath
  
  0 vframe celldim 7 mul add moveto
  
  pagewidth 0 rlineto
  pagewidth pageheight lineto
  0 pageheight lineto
  closepath
  
  clip
  newpath
  
  % Set the chocolate color
  /chcolor areacolors 1 get def
  
  % Draw just the side part of the chocolate bar with this clipping
  % enabled
  drawsidepart
  
  % Restore clipping state
  cliprestore

} bind def

% Function to draw a requested frame; put the frame number on the stack
% before calling; frame 1 is first frame
%
% FRAME 1 : original positions
% FRAME 2 : bottom piece first motion
% FRAME 3 : right piece displacement
% FRAME 4 : top piece displacement
% FRAME 5 : bottom piece second displacement
%
/animate {

  % Left piece is always drawn in same position
  gsave
  drawleft
  grestore
  
  % Bottom piece is only in original position for first frame, moved
  % position for frames 2-4 and in adjusted position for frame 5
  gsave
  dup dup 5 lt exch 1 gt and {
    % Frames 2-4 -- move bottom piece down one cell and two cells left
    celldim 2 mul neg celldim neg translate
  } if
  dup 5 ge {
    % Frames 5+ -- move bottom piece two cells left as before, except
    % maintain the slope so there is no gap
    celldim 2 mul neg
    dup 2 mul 5 div
      translate
  } if
  drawbottom
  grestore

  % Right piece moves starting at frame 3
  gsave
  dup 3 ge {
    % Frames 3+ -- move right piece down two cells and five cells left
    celldim 5 mul neg celldim 2 mul neg translate
  } if
  drawright
  grestore
  
  % Top piece moves starting at frame 4
  gsave
  dup 4 ge {
    % Frames 4+ -- move the top piece down one cell and three cells left
    celldim 3 mul neg celldim neg translate
  } if
  drawtop
  grestore

  % Pop frame number off stack
  pop

} bind def

% Render all the frames on separate pages
%
1 1 5 {
  animate
  showpage
} for
